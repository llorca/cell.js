
if(typeof CELL==='undefined')
var CELL={};CELL.method=function(that,name,method,_super){if(_super){var m=that[name];_super[name]=function(){return m.apply(that,arguments);};}
that[name]=method;};CELL.getter=function(that,name,obj,prop){var getter=function(){return obj[prop];};that[name]=getter;};CELL.setter=function(that,name,obj,prop){var setter=function(arg){obj[prop]=arg;return that;};that['set'+name.substring(0,1).toUpperCase()+name.substring(1)]=setter;};CELL.responds=function(that,name){return(that[name]&&typeof that[name]==='function');};if(typeof CELL==='undefined')
var CELL={};CELL.emitter=function(spec,my){my=my||{};var _super={};my.handlers={};var on;var emit;var off;var that={};on=function(type,handler){if(typeof handler==='function'){my.handlers[type]=my.handlers[type]||[];my.handlers[type].push(handler);}
else{throw new Error('emitter: not a function');}};emit=function(){var args=Array.prototype.slice.call(arguments);var name=args.shift();if(my.handlers[name]){for(var i=0;i<my.handlers[name].length;i++){if(my.handlers[name][i])
my.handlers[name][i].apply(this,args);}}};off=function(type,handler){for(var i=my.handlers[type].length-1;i>=0;i--){if(handler===my.handlers[type][i])
my.handlers[type].splice(i,1);}};method(that,'on',on,_super);method(that,'emit',emit,_super);method(that,'off',off,_super);getter(that,'handlers',my,'handlers');return that;};if(typeof CELL==='undefined')
var CELL={};CELL.cell=function(spec,my){var _super={};var my=my||{};my.element=null;my.path=spec.path||'/';my.children={};my.json={};var build;var refresh;var find;var bind;var that=CELL.emitter({});build=function(){throw new Error('`build` must be implemented : '+my.path);my.element=$('<div></div>');my.children['foo']=foocell({path:my.path+'/foo'});my.element.append(my.children['foo'].build());return my.element;};bind=function(){my.hdlr=my.hdl||function(path){that.emit('update',path);};for(var c in my.children){if(my.children.hasOwnProperty(c)){my.children[c].off('update',my.hdlr);my.children[c].on('update',my.hdlr);}}};refresh=function(json){my.json=json;for(var c in my.children){if(my.children.hasOwnProperty(c))
my.children[c].refresh(json[c]);}
bind();};find=function(path){var comps=path.split('/');if(comps.length===0)
return that;else{var next=comps.shift();return my.children[next].find(comps.join('/'));}};method(that,'init',init,_super);method(that,'render',render,_super);method(that,'find',find,_super);getter(that,'children',my,'children');getter(that,'element',my,'element');getter(that,'path',my,'path');getter(that,'json',my,'json');return that;};